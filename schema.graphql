# EntityMetadata
# Enforces important fields on each entity that implement this interface
interface EntityMetadata {
  # Contract address
  id: ID!
  # The UTC timestamp at which the auction was placed
  createdAt: Int!
  # The UTC timestamp at which the auction was updated
  updatedAt: Int!
  # The UTC timestamp at which the auction was deleted
  deletedAt: Int
}

#################################################

# MesaFactory
# Stores critical information the MesaFactory.
# Allows subgraph function to access the MesaFactory without knowing its address
type MesaFactory @entity {
  "ID: should be a unique easy-to-reference from the subgraph"
  id: ID!
  "Number of sales created via the factory"
  saleCount: Int!
  "MesaFactory contract address"
  address: Bytes!
  "Fee manager; CFO"
  feeManager: Bytes!
  "Fee Collector address: DAO/EOA/multisig"
  feeTo: Bytes!
  "Template manager address"
  templateManager: Bytes!
  "TemplateLauncher contract address"
  templateLauncher: Bytes!
  "Fee for launching a new sale"
  saleFee: BigInt!
  feeNumerator: BigInt!
  "Fee for luanching a new Template fee"
  templateFee: BigInt!
}

#################################################

# FairSale entity
type FairSale implements EntityMetadata @entity {
  "The sale contract address"
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  # Specific to the EasyAuction
  "The sale name"
  name: String
  "Sale status: open/ended/settled/upcoming"
  status: String!
  "Date of the sale start"
  startDate: Int!
  "Date of the sale end"
  endDate: Int!
  "Total amount of tokens available for sale"
  tokensForSale: BigInt!
  "Minimum amount per bid"
  minimumBidAmount: BigInt!
  "Accepted bidding token (ie: DAI, USDC)"
  tokenIn: Token!
  "Auctioning token"
  tokenOut: Token!
  "The minimal funding threshold for executing the settlement. If funding is not reached, everyone will get back their investment"
  minFundingThreshold: Int
  "List of bids"
  bids: [FairSaleBid!] @derivedFrom(field: "sale")
}

# FairSaleUser
type FairSaleUser implements EntityMetadata @entity {
  "Time at which the User was registered is the ID"
  id: ID!
  "The FairSale this user is associated with"
  sale: FairSale!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  address: Bytes!
  "The ownerId in the FairSale contract"
  ownerId: Int!
}

# FairSaleBid
type FairSaleBid implements EntityMetadata @entity {
  id: ID!
  "The FairSale the bid is associated with"
  sale: FairSale!
  # submitted/settled/cancelled/claimed
  status: String!
  "The UTC timestamp at which the Bid was placed"
  createdAt: Int!
  "The UTC timestamp at which the Bid was updated"
  updatedAt: Int!
  "The UTC timestamp at which the Bid was deleted"
  deletedAt: Int
  "Number of tokens the investor wants to invest"
  tokenInAmount: BigInt!
  "Number of tokens the investor wants to buy"
  tokenOutAmount: BigInt!
  "The owner of the Bid"
  ownerId: String!
}

#################################################

# FixedPriceSale
type FixedPriceSale implements EntityMetadata @entity {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "The name of the same, default is the tokenIn's name"
  name: String!
  "Sale status: open/ended/settled/upcoming/cancelled/failed"
  status: String!
  "The UTC timestamp at which the sale starts"
  startDate: Int! # Open timestamp
  "The UTC timestamp at which the sale closes"
  endDate: Int! # Close timestamp
  "Token price"
  tokenPrice: BigInt!
  "Amount of tokens to sell"
  sellAmount: BigInt!
  "Amount of tokens sold so far"
  soldAmount: BigInt!
  # Minimum amount per bid
  minimumRaise: BigInt!
  "Minimum token amount per purchase"
  allocationMin: BigInt!
  "Maximum token amount per purchase"
  allocationMax: BigInt!
  "Token investors can use to bid"
  tokenIn: Token!
  "Token investor get"
  tokenOut: Token!
  "List of sale purchases"
  purchases: [FixedPriceSalePurchase!] @derivedFrom(field: "sale")
}

type FixedPriceSalePurchase implements EntityMetadata @entity {
  "The purchase ID"
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  "FixedPriceSale this purchase is associated with"
  sale: FixedPriceSale!
  "Address of buyer"
  buyer: Bytes!
  "Amount of tokens"
  amount: BigInt!
}

#################################################

# Token
type Token @entity {
  "Token address"
  id: ID!
  "Token name, from the smart contract ERC20.name()"
  name: String
  "The token symbol from ERC20.symbol()"
  symbol: String
  "The token decimals, from ERC.decimals()"
  decimals: BigInt!
}

#################################################

type SaleUser @entity {
  # User id
  id: ID!
  # The bidder's Ethereum address
  address: Bytes
}

#################################################

# Sale Templates
# Each Sale contract implements a template
type SaleTemplate @entity {
  # TemplatesId from the event
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  # Address of the SaleTemplate contract: either EasyAuction or FixedPriceSale
  address: Bytes!
  # Address of the MesaFactory
  factory: Bytes!
  # Template name
  name: SaleTemplateNames!
  verified: Boolean!
}

enum SaleTemplateNames {
  FairSaleTemplate
  FixedPriceSaleTemplate
}

# MesaLog beacuses The Graph internal logging does not work
type MesaLog @entity {
  id: ID!
  content: String!
}
